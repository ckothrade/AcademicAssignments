
//BoxOfProduce Class & BoxOfProduce Class Test Program
//Program Description: This program contains the BoxOfProduce class, objects of which represent boxes of produce
//each containing 3 bundles of some type of fruit or vegetable.  The main function of this program tests the 
//BoxOfProduce class by creating an object of BoxOfProduce, filling it with three bundles randomly selected from
//five different options for type of fruit or vegetable: Broccoli, Tomato, Kiwi, Kale, or Tomatillo.  The user
//is then presented with the option to choose one of the bundles and substitute in its place a new bundle chosen
//from one of the five options listed above.  The user is allowed to substitute bundles as many times as they want.
//After the user is finished substituting, they are given the option to create a new BoxOfProduce and start the
//process over again.  The BoxOfProduce class keeps track of how many boxes have been created so far and displays
//this value to the user.

#include <iostream>
#include <string>
#include <stdlib.h> //for rand()
#include <cstdlib> //for exit
#include <time.h> //srand(time(NULL)) used to seed rand()
using namespace std;


//Class delcarations:
//######################//
//# BoxOfProduce Class #//
//######################//
//Description: Objects of this class represent boxes of produce each containing 3 bundles of some type of fruit or vegetable.
//The three types of bundles are stored as an array of strings, and the number of BoxOfProduce objects created so far are kept
//track of by a static variable.
class BoxOfProduce {
	public:
		//CONSTRUCTORS:
		BoxOfProduce(){numBoxes++;}
		//OTHER FUNCTIONS:
		void output();//Displays the contents of this BoxOfProduce.
		//GETTERS:
		string getProduceBundleItem(int itemNumber);
		static int getNumBoxes(){return numBoxes;}
		static int getBUNDLES_PER_BOX(){return BUNDLES_PER_BOX;}
		//SETTERS:
		void setProduceBundleItem(int itemNumber, string bundleItem);
	private:
		static const int BUNDLES_PER_BOX = 3;//This defines the number of fruit or vegetable bundles in each BoxOfProduce.
		string produceBundle[BUNDLES_PER_BOX];//Contains the names of the vegetables or fruits stored in this BoxOfProduce.
		static int numBoxes;//Keeps track of how many boxes have been created so far.
};

//Intitiallize numBoxes to zero:
int BoxOfProduce::numBoxes = 0;

//Function prototypes:
string RandomVeggie();//Randomly selects and then returns the name of one of five vegetables or fruits: Broccoli, Tomato, Kiwi, Kale, or Tomatillo.
void FillBoxOfProduce(BoxOfProduce& b);//Fills a BoxOfProduce with random vegetables generated by RandomVeggie().
bool SubstituteVeggie(BoxOfProduce& b);//Gives the user the option to swap items in the produce bundle for other vegetables of their choosing.
									   //Returns true if the user does want to perform a substitution, false if they decide not to. 
bool ContinueProgram();//ContinueProgram: Prompts the user, asking them if they wish to continue the program.  Returns true if yes, false if no.

int main(){
	
	//Seed the random number generator:
	srand(time(NULL));
	
	//Main program loop:
	do{
		BoxOfProduce b1;
		FillBoxOfProduce(b1);
		b1.output();
		
		//Loop that allows the user to substitute veggies as much as they want:
		while(SubstituteVeggie(b1)){
			system("cls");
			cout << "The contents of your box of produce have been updated:" << endl << endl;
			b1.output();//If they decide to substitute a veggie, then display the new contents of the BoxOfProduce:
		}
	} while(ContinueProgram());
	
	return 0;
}

//------------------------------------------------------------------------------//
//RandomVeggie: Randomly selects and then returns the name of one of five       //
//vegetables or fruits: Broccoli, Tomato, Kiwi, Kale, or Tomatillo.             //
//------------------------------------------------------------------------------//
string RandomVeggie(){
	int veggie = (rand()%(5-1+1))+1;//Sets veggie to a random number between 1 and 5.
	
	switch(veggie){
		case 1:
			return "Broccoli";
		case 2:
			return "Tomato";
		case 3:
			return "Kiwi";
		case 4:
			return "Kale";
		case 5:
			return "Tomatillo";
		default:
			cout << "ERROR: Somehow the variable veggie wasn't between 1 and 5 like it should have been." << endl;
			cout << "Ending program..." << endl << endl;
			exit(1);
	}
}

//------------------------------------------------------------------------------//
//FillBoxOfProduce: Fills a BoxOfProduce with random vegetables                 //
//generated by RandomVeggie().                                                  //
//------------------------------------------------------------------------------//
void FillBoxOfProduce(BoxOfProduce& b){
	
	for(int i = 0; i < BoxOfProduce::getBUNDLES_PER_BOX(); i++){
		b.setProduceBundleItem(i, RandomVeggie());
	}
	
}

//-----------------------------------------------------------------------------------------------------------------------//
//Gives the user the option to swap items in the produce bundle for other vegetables of their choosing.                  //
//Returns true if the user does want to perform a substitution, false if they decide not to.                             //
//-----------------------------------------------------------------------------------------------------------------------//
bool SubstituteVeggie(BoxOfProduce& b){
	
	//Stores the user's choices:
	int userChoiceItem;//Stores the user's choice of which vegetable they will be swapping out of the box of produce
	int userChoiceSubstitute;//Store the user's choice of which vegetable they will be swapping into the box of produce
	
	//Prompt the user, giving them the option to choose which item to swap or to not swap at all:
	cout << endl << "Would you like to swap any of these items out for a different item?" << endl;
	cout << "Please enter the number of the item you would like to swap," << endl; 
	cout << "or enter 0 if you are satisfied with the current bundle and" << endl; 
	cout << "don't want to swap anything: ";
	
	//Get input for userChoiceItem and loop until its validated:
	while(true){
		
		cin >> userChoiceItem;//Get input...
		
		//...Then check it:
		if(cin.fail()){
			cout << "That's not a number. Please enter a number between 0 and " << BoxOfProduce::getBUNDLES_PER_BOX() << ": ";
			cin.clear();
			cin.sync();
			continue;
		}
		else if(userChoiceItem > BoxOfProduce::getBUNDLES_PER_BOX()){
			cout << "Number is too large. Please enter a number between 0 and " << BoxOfProduce::getBUNDLES_PER_BOX() << ": ";
			continue;
		}
		else if(userChoiceItem < 0){
			cout << "Number is too small. Please enter a number between 0 and " << BoxOfProduce::getBUNDLES_PER_BOX() << ": ";
			continue;
		}
		else
			break;
			
	}
	cin.sync();//Flush the input buffer in order to rid the input stream of any pesky newline characters.
	
	//End the function if the user elected not to swap any vegetables...
	if(userChoiceItem == 0){
		cout << endl << "Keeping current items as they are." << endl;
		system("pause");
		return false;//The user didn't decide to substitute a veggie after all, so return false.
	}
	
	//...Otherwise allow them to chose which vegetable they wish to substitute in:
	cout << endl << "You chose item #" << userChoiceItem << ", which is a bundle of " << b.getProduceBundleItem(userChoiceItem-1) << "." << endl;
	cout << "What would you like to swap it for?  Your choices are:" << endl;
	cout << "(1) Broccoli" << endl;
	cout << "(2) Tomato" << endl;
	cout << "(3) Kiwi" << endl;
	cout << "(4) Kale" << endl;
	cout << "(5) Tomatillo" << endl;
	cout << "Enter the number corresponding to the vegetable you would like" << endl;
	cout << "to substitute for the " << b.getProduceBundleItem(userChoiceItem-1) << ": ";
	
	//Get input for userChoiceSubstitute and loop until its validated:
	while(true){
		
		cin >> userChoiceSubstitute;//Get input...
		
		//...Then check it:
		if(cin.fail()){
			cout << "That's not a number. Please enter a number between 1 and 5: ";
			cin.clear();
			cin.sync();
			continue;
		}
		else if(userChoiceSubstitute > 5){
			cout << "Number is too large. Please enter a number between 1 and 5: ";
			continue;
		}
		else if(userChoiceSubstitute < 1){
			cout << "Number is too small. Please enter a number between 1 and 5: ";
			continue;
		}
		else
			break;
			
	}
	cin.sync();//Flush the input buffer in order to rid the input stream of any pesky newline characters.
	
	//Substitute in the user's new choice of vegetable for the old vegetable:
	switch(userChoiceSubstitute){
		case 1:
			b.setProduceBundleItem(userChoiceItem-1, "Broccoli");
			break;
		case 2:
			b.setProduceBundleItem(userChoiceItem-1, "Tomato");
			break;
		case 3:
			b.setProduceBundleItem(userChoiceItem-1, "Kiwi");
			break;
		case 4:
			b.setProduceBundleItem(userChoiceItem-1, "Kale");
			break;
		case 5:
			b.setProduceBundleItem(userChoiceItem-1, "Tomatillo");
			break;
		default:
			cout << "ERROR: Somehow the variable userChoiceSubstitute wasn't between 1 and 5 like it should have been." << endl;
			cout << "Ending program..." << endl << endl;
			exit(1);
	}
	
	
	return true;//The user did decide to substitute a veggie, so return true.
}

//-----------------------------------------------------------------------------------------------------------------------//
//ContinueProgram: Prompts the user, asking them if they wish to continue the program.  Returns true if yes, false if no.//
//-----------------------------------------------------------------------------------------------------------------------//
bool ContinueProgram(){
	
	char userChoice;//Holds the choice, y or n, input by the user.
	
	//Get and validate the user's choice
	do{
		cout << endl;
		cout << "Would you like to create another box of produce? (y/n): ";
		cin.sync();
		cin  >> userChoice;
		userChoice = tolower(userChoice);
		system("cls");
	} while(userChoice != 'y' && userChoice != 'n');
	
	//Return the user's choice, either to continue the program or end it:
	if(userChoice == 'y'){
		cout << endl;
		cout << "Creating another box..." << endl << endl;
		system("pause");
		system("cls");
		cin.sync();
		return true;
	}
	else{
		cout << endl;
		cout << "Ending program..." << endl << endl;
		system("pause");
		cin.sync();
		return false;
	}
	
}


//################################//
//# BoxOfProduce Class Functions #//
//################################//

//------------------------------------------------------------------------------//
//output: Displays the contents of this BoxOfProduce.                           //
//------------------------------------------------------------------------------//
void BoxOfProduce::output(){
	
	cout << "Produce box #" << BoxOfProduce::getNumBoxes() << " contains the following items:" << endl;
	
	for(int i = 0; i < BUNDLES_PER_BOX; i++){
		cout << "Item #" << i+1 << ": ";
		cout << produceBundle[i] << endl;
	}
	
	cout << endl;
	system("pause");//Allow the user to view the data before continuing.
}

//------------------------------------------------------------------------------//
//getProduceBundleItem: Gets the produce bundle stored in array produceBundle   //
//at index itemNumber. If the array index that the function is trying to access //
//is out of bounds, an error message will be displayed and the program will end.//
//------------------------------------------------------------------------------//
string BoxOfProduce::getProduceBundleItem(int itemNumber){
	
	//If the array index is within produceBundle's bounds, then return its value at that index...
	if(itemNumber < BUNDLES_PER_BOX)
		return produceBundle[itemNumber];
	
	//...Otherwise display an error message and terminate the program.
	else{
		cout << endl << "- ERROR: ARRAY OUT OF BOUNDS -" << endl;
		cout << "Size of produceBundle array is " << BUNDLES_PER_BOX << "." << endl; 
		cout << "You just attempted to access the element with index " << itemNumber << ", which doesn't exist." << endl;
		cout << "Ending program..." << endl << endl;
		exit(1);
	}
		
}

//------------------------------------------------------------------------------//
//setProduceBundleItem: Sets the produce bundle stored in array produceBundle   //
//at index itemNumber. If the array index that the function is trying to set    //
//is out of bounds, an error message will be displayed and the program will end.//
//------------------------------------------------------------------------------//
void BoxOfProduce::setProduceBundleItem(int itemNumber, string bundleItem){
	
	//If the array index is within produceBundle's bounds, then set its value at that index...
	if(itemNumber < BUNDLES_PER_BOX)
		produceBundle[itemNumber] = bundleItem;
		
	//...Otherwise display an error message and terminate the program.
	else{
		cout << endl << "- ERROR: ARRAY OUT OF BOUNDS -" << endl;
		cout << "Size of produceBundle array is " << BUNDLES_PER_BOX << "." << endl; 
		cout << "You just attempted to set the element with index " << itemNumber << ", which doesn't exist." << endl;
		cout << "Ending program..." << endl << endl;
		exit(1);
	}
		
}
